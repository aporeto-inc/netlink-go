// Automatically generated by MockGen. DO NOT EDIT!
// Source: syscall_interfaces.go

package syscallwrappers

import (
	syscall "syscall"

	gomock "github.com/golang/mock/gomock"
)

// MockSyscalls is a mock of Syscalls interface
type MockSyscalls struct {
	ctrl     *gomock.Controller
	recorder *MockSyscallsMockRecorder
}

// MockSyscallsMockRecorder is the mock recorder for MockSyscalls
type MockSyscallsMockRecorder struct {
	mock *MockSyscalls
}

// NewMockSyscalls creates a new mock instance
func NewMockSyscalls(ctrl *gomock.Controller) *MockSyscalls {
	mock := &MockSyscalls{ctrl: ctrl}
	mock.recorder = &MockSyscallsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (_m *MockSyscalls) EXPECT() *MockSyscallsMockRecorder {
	return _m.recorder
}

// Bind mocks base method
func (_m *MockSyscalls) Bind(fd int, sa syscall.Sockaddr) error {
	ret := _m.ctrl.Call(_m, "Bind", fd, sa)
	ret0, _ := ret[0].(error)
	return ret0
}

// Bind indicates an expected call of Bind
func (_mr *MockSyscallsMockRecorder) Bind(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Bind", arg0, arg1)
}

// Socket mocks base method
func (_m *MockSyscalls) Socket(domain int, typ int, proto int) (int, error) {

	ret := _m.ctrl.Call(_m, "Socket", domain, typ, proto)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Socket indicates an expected call of Socket
func (_mr *MockSyscallsMockRecorder) Socket(arg0, arg1, arg2 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Socket", arg0, arg1, arg2)
}

// SetsockoptInt mocks base method
func (_m *MockSyscalls) SetsockoptInt(fd int, level int, opt int, value int) error {
	ret := _m.ctrl.Call(_m, "SetsockoptInt", fd, level, opt, value)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetsockoptInt indicates an expected call of SetsockoptInt
func (_mr *MockSyscallsMockRecorder) SetsockoptInt(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SetsockoptInt", arg0, arg1, arg2, arg3)
}

// Close mocks base method
func (_m *MockSyscalls) Close(fd int) error {
	ret := _m.ctrl.Call(_m, "Close", fd)
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close
func (_mr *MockSyscallsMockRecorder) Close(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Close", arg0)
}

// Recvfrom mocks base method
func (_m *MockSyscalls) Recvfrom(fd int, p []byte, flags int) (int, syscall.Sockaddr, error) {
	ret := _m.ctrl.Call(_m, "Recvfrom", fd, p, flags)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(syscall.Sockaddr)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Recvfrom indicates an expected call of Recvfrom
func (_mr *MockSyscallsMockRecorder) Recvfrom(arg0, arg1, arg2 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Recvfrom", arg0, arg1, arg2)
}

// Sendto mocks base method
func (_m *MockSyscalls) Sendto(fd int, p []byte, flags int, to syscall.Sockaddr) error {
	ret := _m.ctrl.Call(_m, "Sendto", fd, p, flags, to)
	ret0, _ := ret[0].(error)
	return ret0
}

// Sendto indicates an expected call of Sendto
func (_mr *MockSyscallsMockRecorder) Sendto(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Sendto", arg0, arg1, arg2, arg3)
}

// Syscall mocks base method
func (_m *MockSyscalls) Syscall(trap uintptr, a1 uintptr, a2 uintptr, a3 uintptr) (uintptr, uintptr, syscall.Errno) {
	ret := _m.ctrl.Call(_m, "Syscall", trap, a1, a2, a3)
	ret0, _ := ret[0].(uintptr)
	ret1, _ := ret[1].(uintptr)
	ret2, _ := ret[2].(syscall.Errno)
	return ret0, ret1, ret2
}

// Syscall indicates an expected call of Syscall
func (_mr *MockSyscallsMockRecorder) Syscall(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Syscall", arg0, arg1, arg2, arg3)
}
