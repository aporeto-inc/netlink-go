// Code generated by MockGen. DO NOT EDIT.
// Source: nfqueue/interfaces.go

package mocknfqueue

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	common "go.aporeto.io/netlink-go/common"
	reflect "reflect"
	syscall "syscall"
)

// MockVerdict is a mock of Verdict interface
type MockVerdict struct {
	ctrl     *gomock.Controller
	recorder *MockVerdictMockRecorder
}

// MockVerdictMockRecorder is the mock recorder for MockVerdict
type MockVerdictMockRecorder struct {
	mock *MockVerdict
}

// NewMockVerdict creates a new mock instance
func NewMockVerdict(ctrl *gomock.Controller) *MockVerdict {
	mock := &MockVerdict{ctrl: ctrl}
	mock.recorder = &MockVerdictMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (_m *MockVerdict) EXPECT() *MockVerdictMockRecorder {
	return _m.recorder
}

// SetVerdict2 mocks base method
func (_m *MockVerdict) SetVerdict2(queueNum uint32, verdict uint32, mark uint32, packetLen uint32, packetID uint32, packet []byte) {
	_m.ctrl.Call(_m, "SetVerdict2", queueNum, verdict, mark, packetLen, packetID, packet)
}

// SetVerdict2 indicates an expected call of SetVerdict2
func (_mr *MockVerdictMockRecorder) SetVerdict2(arg0, arg1, arg2, arg3, arg4, arg5 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "SetVerdict2", reflect.TypeOf((*MockVerdict)(nil).SetVerdict2), arg0, arg1, arg2, arg3, arg4, arg5)
}

// SetVerdict mocks base method
func (_m *MockVerdict) SetVerdict(queueNum uint32, verdict uint32, packetLen uint32, packetID uint32, packet []byte) {
	_m.ctrl.Call(_m, "SetVerdict", queueNum, verdict, packetLen, packetID, packet)
}

// SetVerdict indicates an expected call of SetVerdict
func (_mr *MockVerdictMockRecorder) SetVerdict(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "SetVerdict", reflect.TypeOf((*MockVerdict)(nil).SetVerdict), arg0, arg1, arg2, arg3, arg4)
}

// GetNotificationChannel mocks base method
func (_m *MockVerdict) GetNotificationChannel() chan *NFPacket {
	ret := _m.ctrl.Call(_m, "GetNotificationChannel")
	ret0, _ := ret[0].(chan *NFPacket)
	return ret0
}

// GetNotificationChannel indicates an expected call of GetNotificationChannel
func (_mr *MockVerdictMockRecorder) GetNotificationChannel() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "GetNotificationChannel", reflect.TypeOf((*MockVerdict)(nil).GetNotificationChannel))
}

// StopQueue mocks base method
func (_m *MockVerdict) StopQueue() error {
	ret := _m.ctrl.Call(_m, "StopQueue")
	ret0, _ := ret[0].(error)
	return ret0
}

// StopQueue indicates an expected call of StopQueue
func (_mr *MockVerdictMockRecorder) StopQueue() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "StopQueue", reflect.TypeOf((*MockVerdict)(nil).StopQueue))
}

// MockNFQueue is a mock of NFQueue interface
type MockNFQueue struct {
	ctrl     *gomock.Controller
	recorder *MockNFQueueMockRecorder
}

// MockNFQueueMockRecorder is the mock recorder for MockNFQueue
type MockNFQueueMockRecorder struct {
	mock *MockNFQueue
}

// NewMockNFQueue creates a new mock instance
func NewMockNFQueue(ctrl *gomock.Controller) *MockNFQueue {
	mock := &MockNFQueue{ctrl: ctrl}
	mock.recorder = &MockNFQueueMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (_m *MockNFQueue) EXPECT() *MockNFQueueMockRecorder {
	return _m.recorder
}

// SetVerdict2 mocks base method
func (_m *MockNFQueue) SetVerdict2(queueNum uint32, verdict uint32, mark uint32, packetLen uint32, packetID uint32, packet []byte) {
	_m.ctrl.Call(_m, "SetVerdict2", queueNum, verdict, mark, packetLen, packetID, packet)
}

// SetVerdict2 indicates an expected call of SetVerdict2
func (_mr *MockNFQueueMockRecorder) SetVerdict2(arg0, arg1, arg2, arg3, arg4, arg5 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "SetVerdict2", reflect.TypeOf((*MockNFQueue)(nil).SetVerdict2), arg0, arg1, arg2, arg3, arg4, arg5)
}

// SetVerdict mocks base method
func (_m *MockNFQueue) SetVerdict(queueNum uint32, verdict uint32, packetLen uint32, packetID uint32, packet []byte) {
	_m.ctrl.Call(_m, "SetVerdict", queueNum, verdict, packetLen, packetID, packet)
}

// SetVerdict indicates an expected call of SetVerdict
func (_mr *MockNFQueueMockRecorder) SetVerdict(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "SetVerdict", reflect.TypeOf((*MockNFQueue)(nil).SetVerdict), arg0, arg1, arg2, arg3, arg4)
}

// GetNotificationChannel mocks base method
func (_m *MockNFQueue) GetNotificationChannel() chan *NFPacket {
	ret := _m.ctrl.Call(_m, "GetNotificationChannel")
	ret0, _ := ret[0].(chan *NFPacket)
	return ret0
}

// GetNotificationChannel indicates an expected call of GetNotificationChannel
func (_mr *MockNFQueueMockRecorder) GetNotificationChannel() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "GetNotificationChannel", reflect.TypeOf((*MockNFQueue)(nil).GetNotificationChannel))
}

// StopQueue mocks base method
func (_m *MockNFQueue) StopQueue() error {
	ret := _m.ctrl.Call(_m, "StopQueue")
	ret0, _ := ret[0].(error)
	return ret0
}

// StopQueue indicates an expected call of StopQueue
func (_mr *MockNFQueueMockRecorder) StopQueue() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "StopQueue", reflect.TypeOf((*MockNFQueue)(nil).StopQueue))
}

// NfqOpen mocks base method
func (_m *MockNFQueue) NfqOpen() (SockHandle, error) {
	ret := _m.ctrl.Call(_m, "NfqOpen")
	ret0, _ := ret[0].(SockHandle)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NfqOpen indicates an expected call of NfqOpen
func (_mr *MockNFQueueMockRecorder) NfqOpen() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "NfqOpen", reflect.TypeOf((*MockNFQueue)(nil).NfqOpen))
}

// UnbindPf mocks base method
func (_m *MockNFQueue) UnbindPf() error {
	ret := _m.ctrl.Call(_m, "UnbindPf")
	ret0, _ := ret[0].(error)
	return ret0
}

// UnbindPf indicates an expected call of UnbindPf
func (_mr *MockNFQueueMockRecorder) UnbindPf() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "UnbindPf", reflect.TypeOf((*MockNFQueue)(nil).UnbindPf))
}

// CreateQueue mocks base method
func (_m *MockNFQueue) CreateQueue(num uint16, data func(*NFPacket, interface{}), errorCallback func(error, interface{}), privateData interface{}) error {
	ret := _m.ctrl.Call(_m, "CreateQueue", num, data, errorCallback, privateData)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateQueue indicates an expected call of CreateQueue
func (_mr *MockNFQueueMockRecorder) CreateQueue(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "CreateQueue", reflect.TypeOf((*MockNFQueue)(nil).CreateQueue), arg0, arg1, arg2, arg3)
}

// NfqSetMode mocks base method
func (_m *MockNFQueue) NfqSetMode(mode nfqConfigMode, packetSize uint32) error {
	ret := _m.ctrl.Call(_m, "NfqSetMode", mode, packetSize)
	ret0, _ := ret[0].(error)
	return ret0
}

// NfqSetMode indicates an expected call of NfqSetMode
func (_mr *MockNFQueueMockRecorder) NfqSetMode(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "NfqSetMode", reflect.TypeOf((*MockNFQueue)(nil).NfqSetMode), arg0, arg1)
}

// NfqSetQueueMaxLen mocks base method
func (_m *MockNFQueue) NfqSetQueueMaxLen(queuelen uint32) error {
	ret := _m.ctrl.Call(_m, "NfqSetQueueMaxLen", queuelen)
	ret0, _ := ret[0].(error)
	return ret0
}

// NfqSetQueueMaxLen indicates an expected call of NfqSetQueueMaxLen
func (_mr *MockNFQueueMockRecorder) NfqSetQueueMaxLen(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "NfqSetQueueMaxLen", reflect.TypeOf((*MockNFQueue)(nil).NfqSetQueueMaxLen), arg0)
}

// NfqClose mocks base method
func (_m *MockNFQueue) NfqClose() {
	_m.ctrl.Call(_m, "NfqClose")
}

// NfqClose indicates an expected call of NfqClose
func (_mr *MockNFQueueMockRecorder) NfqClose() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "NfqClose", reflect.TypeOf((*MockNFQueue)(nil).NfqClose))
}

// NfqDestroyQueue mocks base method
func (_m *MockNFQueue) NfqDestroyQueue() error {
	ret := _m.ctrl.Call(_m, "NfqDestroyQueue")
	ret0, _ := ret[0].(error)
	return ret0
}

// NfqDestroyQueue indicates an expected call of NfqDestroyQueue
func (_mr *MockNFQueueMockRecorder) NfqDestroyQueue() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "NfqDestroyQueue", reflect.TypeOf((*MockNFQueue)(nil).NfqDestroyQueue))
}

// Recv mocks base method
func (_m *MockNFQueue) Recv() (*common.NfqGenMsg, map[int]*common.NfAttrResponsePayload, error) {
	ret := _m.ctrl.Call(_m, "Recv")
	ret0, _ := ret[0].(*common.NfqGenMsg)
	ret1, _ := ret[1].(map[int]*common.NfAttrResponsePayload)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Recv indicates an expected call of Recv
func (_mr *MockNFQueueMockRecorder) Recv() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Recv", reflect.TypeOf((*MockNFQueue)(nil).Recv))
}

// ProcessPackets mocks base method
func (_m *MockNFQueue) ProcessPackets(ctx context.Context) {
	_m.ctrl.Call(_m, "ProcessPackets", ctx)
}

// ProcessPackets indicates an expected call of ProcessPackets
func (_mr *MockNFQueueMockRecorder) ProcessPackets(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "ProcessPackets", reflect.TypeOf((*MockNFQueue)(nil).ProcessPackets), arg0)
}

// BindPf mocks base method
func (_m *MockNFQueue) BindPf() error {
	ret := _m.ctrl.Call(_m, "BindPf")
	ret0, _ := ret[0].(error)
	return ret0
}

// BindPf indicates an expected call of BindPf
func (_mr *MockNFQueueMockRecorder) BindPf() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "BindPf", reflect.TypeOf((*MockNFQueue)(nil).BindPf))
}

// setSockHandle mocks base method
func (_m *MockNFQueue) setSockHandle(handle SockHandle) {
	_m.ctrl.Call(_m, "setSockHandle", handle)
}

// setSockHandle indicates an expected call of setSockHandle
func (_mr *MockNFQueueMockRecorder) setSockHandle(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "setSockHandle", reflect.TypeOf((*MockNFQueue)(nil).setSockHandle), arg0)
}

// MockSockHandle is a mock of SockHandle interface
type MockSockHandle struct {
	ctrl     *gomock.Controller
	recorder *MockSockHandleMockRecorder
}

// MockSockHandleMockRecorder is the mock recorder for MockSockHandle
type MockSockHandleMockRecorder struct {
	mock *MockSockHandle
}

// NewMockSockHandle creates a new mock instance
func NewMockSockHandle(ctrl *gomock.Controller) *MockSockHandle {
	mock := &MockSockHandle{ctrl: ctrl}
	mock.recorder = &MockSockHandleMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (_m *MockSockHandle) EXPECT() *MockSockHandleMockRecorder {
	return _m.recorder
}

// query mocks base method
func (_m *MockSockHandle) query(msg *syscall.NetlinkMessage) error {
	ret := _m.ctrl.Call(_m, "query", msg)
	ret0, _ := ret[0].(error)
	return ret0
}

// query indicates an expected call of query
func (_mr *MockSockHandleMockRecorder) query(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "query", reflect.TypeOf((*MockSockHandle)(nil).query), arg0)
}

// recv mocks base method
func (_m *MockSockHandle) recv() error {
	ret := _m.ctrl.Call(_m, "recv")
	ret0, _ := ret[0].(error)
	return ret0
}

// recv indicates an expected call of recv
func (_mr *MockSockHandleMockRecorder) recv() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "recv", reflect.TypeOf((*MockSockHandle)(nil).recv))
}

// send mocks base method
func (_m *MockSockHandle) send(msg *syscall.NetlinkMessage) error {
	ret := _m.ctrl.Call(_m, "send", msg)
	ret0, _ := ret[0].(error)
	return ret0
}

// send indicates an expected call of send
func (_mr *MockSockHandleMockRecorder) send(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "send", reflect.TypeOf((*MockSockHandle)(nil).send), arg0)
}

// getFd mocks base method
func (_m *MockSockHandle) getFd() int {
	ret := _m.ctrl.Call(_m, "getFd")
	ret0, _ := ret[0].(int)
	return ret0
}

// getFd indicates an expected call of getFd
func (_mr *MockSockHandleMockRecorder) getFd() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "getFd", reflect.TypeOf((*MockSockHandle)(nil).getFd))
}

// getRcvBufSize mocks base method
func (_m *MockSockHandle) getRcvBufSize() uint32 {
	ret := _m.ctrl.Call(_m, "getRcvBufSize")
	ret0, _ := ret[0].(uint32)
	return ret0
}

// getRcvBufSize indicates an expected call of getRcvBufSize
func (_mr *MockSockHandleMockRecorder) getRcvBufSize() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "getRcvBufSize", reflect.TypeOf((*MockSockHandle)(nil).getRcvBufSize))
}

// getLocalAddress mocks base method
func (_m *MockSockHandle) getLocalAddress() syscall.SockaddrNetlink {
	ret := _m.ctrl.Call(_m, "getLocalAddress")
	ret0, _ := ret[0].(syscall.SockaddrNetlink)
	return ret0
}

// getLocalAddress indicates an expected call of getLocalAddress
func (_mr *MockSockHandleMockRecorder) getLocalAddress() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "getLocalAddress", reflect.TypeOf((*MockSockHandle)(nil).getLocalAddress))
}

// close mocks base method
func (_m *MockSockHandle) close() {
	_m.ctrl.Call(_m, "close")
}

// close indicates an expected call of close
func (_mr *MockSockHandleMockRecorder) close() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "close", reflect.TypeOf((*MockSockHandle)(nil).close))
}
