// Automatically generated by MockGen. DO NOT EDIT!
// Source: github.com/aporeto-inc/netlink-go/common/sockets (interfaces: SockHandle)

package mocksockets

import (
	syscall "syscall"

	sockets "github.com/aporeto-inc/netlink-go/common/sockets"
	gomock "github.com/golang/mock/gomock"
)

// MockSockHandle is a mock of SockHandle interface
type MockSockHandle struct {
	ctrl     *gomock.Controller
	recorder *MockSockHandleMockRecorder
}

// MockSockHandleMockRecorder is the mock recorder for MockSockHandle
type MockSockHandleMockRecorder struct {
	mock *MockSockHandle
}

// NewMockSockHandle creates a new mock instance
func NewMockSockHandle(ctrl *gomock.Controller) *MockSockHandle {
	mock := &MockSockHandle{ctrl: ctrl}
	mock.recorder = &MockSockHandleMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (_m *MockSockHandle) EXPECT() *MockSockHandleMockRecorder {
	return _m.recorder
}

// Close mocks base method
func (_m *MockSockHandle) Close() {
	_m.ctrl.Call(_m, "Close")
}

// Close indicates an expected call of Close
func (_mr *MockSockHandleMockRecorder) Close() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Close")
}

// GetFd mocks base method
func (_m *MockSockHandle) GetFd() int {
	ret := _m.ctrl.Call(_m, "GetFd")
	ret0, _ := ret[0].(int)
	return ret0
}

// GetFd indicates an expected call of GetFd
func (_mr *MockSockHandleMockRecorder) GetFd() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetFd")
}

// GetLocalAddress mocks base method
func (_m *MockSockHandle) GetLocalAddress() syscall.SockaddrNetlink {
	ret := _m.ctrl.Call(_m, "GetLocalAddress")
	ret0, _ := ret[0].(syscall.SockaddrNetlink)
	return ret0
}

// GetLocalAddress indicates an expected call of GetLocalAddress
func (_mr *MockSockHandleMockRecorder) GetLocalAddress() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetLocalAddress")
}

// GetRcvBufSize mocks base method
func (_m *MockSockHandle) GetRcvBufSize() uint32 {
	ret := _m.ctrl.Call(_m, "GetRcvBufSize")
	ret0, _ := ret[0].(uint32)
	return ret0
}

// GetRcvBufSize indicates an expected call of GetRcvBufSize
func (_mr *MockSockHandleMockRecorder) GetRcvBufSize() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetRcvBufSize")
}

// Open mocks base method
func (_m *MockSockHandle) Open(_param0 int, _param1 int) (sockets.SockHandle, error) {
	ret := _m.ctrl.Call(_m, "Open", _param0, _param1)
	ret0, _ := ret[0].(sockets.SockHandle)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Open indicates an expected call of Open
func (_mr *MockSockHandleMockRecorder) Open(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Open", arg0, arg1)
}

// Query mocks base method
func (_m *MockSockHandle) Query(_param0 *syscall.NetlinkMessage) error {
	ret := _m.ctrl.Call(_m, "Query", _param0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Query indicates an expected call of Query
func (_mr *MockSockHandleMockRecorder) Query(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Query", arg0)
}

// Recv mocks base method
func (_m *MockSockHandle) Recv() error {
	ret := _m.ctrl.Call(_m, "Recv")
	ret0, _ := ret[0].(error)
	return ret0
}

// Recv indicates an expected call of Recv
func (_mr *MockSockHandleMockRecorder) Recv() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Recv")
}

// Send mocks base method
func (_m *MockSockHandle) Send(_param0 *syscall.NetlinkMessage) error {
	ret := _m.ctrl.Call(_m, "Send", _param0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Send indicates an expected call of Send
func (_mr *MockSockHandleMockRecorder) Send(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Send", arg0)
}
